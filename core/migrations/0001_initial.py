# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import audit_log.models.fields
import django.utils.timezone
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccidentEntry',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date_time', models.DateTimeField(verbose_name='Date / Time')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('place_def', models.CharField(max_length=50, verbose_name='Ort (genauer)', blank=True)),
                ('violation', models.PositiveSmallIntegerField(verbose_name='Verletzung', choices=[(1, 'Wegeunfall'), (2, 'Schnittverletzung'), (3, 'Verbrennung'), (4, 'Augenverletzung'), (5, 'Ver\xe4tzung'), (6, 'Sonstige')])),
                ('violation_def', models.TextField(verbose_name='Genaue Verletzung und Ursache')),
                ('notify', models.BooleanField(default=False, verbose_name='Meldepflichtig')),
                ('witnesses', models.TextField(help_text='Bitte die Nachnamen der Zeugen durch Komma getrennt hier eingeben.', verbose_name='Zeugen', blank=True)),
                ('helper', models.TextField(verbose_name='Ersthelfer oder Arzt')),
                ('first_aid', models.TextField(verbose_name='Erste-Hilfe-Ma\xdfnahmen/Behandlung')),
                ('used', models.TextField(verbose_name='Benutztes Material', blank=True)),
                ('comment', models.TextField(verbose_name='Bemerkungen', blank=True)),
                ('added_by', models.ForeignKey(blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True)),
                ('employee', models.ForeignKey(verbose_name='Verletzter Mitarbeiter', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': [b'-date_time'],
                'get_latest_by': b'date_time',
                'verbose_name': 'Accident Entry',
                'verbose_name_plural': 'Accident Entries',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(max_length=100, verbose_name='Street', blank=True)),
                ('zip_code', models.CharField(max_length=15, verbose_name='Zip Code', blank=True)),
                ('city', models.CharField(max_length=100, verbose_name='City', blank=True)),
                ('country', models.CharField(max_length=50, verbose_name='Country', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('short_name', models.CharField(max_length=10, verbose_name='Short Name', blank=True)),
                ('fax', models.CharField(max_length=30, verbose_name='Fax', blank=True)),
                ('customer_number', models.CharField(max_length=50, verbose_name='Customer Number', blank=True)),
                ('web', models.URLField(verbose_name='Web', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='Email', blank=True)),
                ('rate', models.BooleanField(default=True, verbose_name='Rate')),
                ('rating', models.CharField(default='D', max_length=1, verbose_name='Rating', choices=[('A', 'A) useable'), ('B', 'B) useable with restrictions'), ('C', 'C) not useable'), ('D', 'D) more ratings needed')])),
                ('rating_note', models.TextField(verbose_name='Rating Note', blank=True)),
                ('rating_users', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Rating Users', blank=True)),
            ],
            options={
                'ordering': (b'name',),
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CompanyRating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('good_quality', models.PositiveSmallIntegerField(verbose_name='Good Quality')),
                ('delivery_time', models.PositiveSmallIntegerField(verbose_name='Delivery Time')),
                ('quality', models.PositiveSmallIntegerField(verbose_name='Quality')),
                ('price', models.PositiveSmallIntegerField(verbose_name='Price')),
                ('service', models.PositiveSmallIntegerField(verbose_name='Service')),
                ('attainability', models.PositiveSmallIntegerField(verbose_name='Attainability')),
                ('documentation', models.PositiveSmallIntegerField(verbose_name='Documentation')),
                ('rating', models.CharField(max_length=1, verbose_name='Rating', choices=[('A', 'A) useable'), ('B', 'B) useable with restrictions'), ('C', 'C) not useable'), ('D', 'D) more ratings needed')])),
                ('rated', models.DateTimeField(auto_now_add=True, verbose_name='Rated')),
                ('note', models.TextField(verbose_name='Note', blank=True)),
                ('company', models.ForeignKey(verbose_name='Company', to='core.Company')),
                ('user', models.ForeignKey(verbose_name='User', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'verbose_name': 'Company Rating',
                'verbose_name_plural': 'Company Ratings',
                'permissions': ((b'summarize', b'Summarize company ratings'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(max_length=100, verbose_name='Street', blank=True)),
                ('zip_code', models.CharField(max_length=15, verbose_name='Zip Code', blank=True)),
                ('city', models.CharField(max_length=100, verbose_name='City', blank=True)),
                ('country', models.CharField(max_length=50, verbose_name='Country', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('name', models.CharField(max_length=100, verbose_name='Organization Name')),
                ('short_name', models.CharField(max_length=20, verbose_name='Organization Short Name', blank=True)),
                ('pdflatex', models.CharField(default='/usr/bin/pdflatex', help_text='Path to pdflatex executable.', max_length=100, verbose_name='PDFLatex')),
                ('latex_options', models.CharField(default='-interaction=nonstopmode', max_length=100, verbose_name='Latex Commandline Options', blank=True)),
                ('fax', models.CharField(max_length=30, verbose_name='Fax', blank=True)),
                ('logo', models.ImageField(upload_to=b'pictures', verbose_name='Logo', blank=True)),
            ],
            options={
                'get_latest_by': b'id',
                'verbose_name': 'Configuration',
                'verbose_name_plural': 'Configurations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name_prefix', models.CharField(max_length=12, verbose_name='Name Prefix')),
                ('lastname', models.CharField(max_length=50, verbose_name='Lastname')),
                ('firstname', models.CharField(max_length=50, verbose_name='Firstname', blank=True)),
                ('function', models.CharField(max_length=50, verbose_name='Function', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='Email', blank=True)),
                ('company', models.ForeignKey(verbose_name='Company', to='core.Company')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContactAuditLogEntry',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('name_prefix', models.CharField(max_length=12, verbose_name='Name Prefix')),
                ('lastname', models.CharField(max_length=50, verbose_name='Lastname')),
                ('firstname', models.CharField(max_length=50, verbose_name='Firstname', blank=True)),
                ('function', models.CharField(max_length=50, verbose_name='Function', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='Email', blank=True)),
                ('action_id', models.AutoField(serialize=False, primary_key=True)),
                ('action_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('action_type', models.CharField(max_length=1, editable=False, choices=[(b'I', 'Created'), (b'U', 'Changed'), (b'D', 'Deleted')])),
                ('action_user', audit_log.models.fields.LastUserField(editable=False, to=settings.AUTH_USER_MODEL, null=True)),
                ('company', models.ForeignKey(verbose_name='Company', to='core.Company')),
            ],
            options={
                'ordering': (b'-action_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CooperationContract',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField(verbose_name='Date')),
                ('job', models.CharField(max_length=50, verbose_name='Job')),
                ('full', models.BooleanField(default=True, verbose_name='Full-Cooperation')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('note', models.TextField(verbose_name='Note', blank=True)),
                ('company', models.ForeignKey(verbose_name='Company', to='core.Company')),
            ],
            options={
                'verbose_name': 'Cooperation Contract',
                'verbose_name_plural': 'Cooperation Contracts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InternalHelp',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(help_text='Used for the title attribute of the help dialog.', max_length=50, verbose_name='Title')),
                ('ident', models.SlugField(help_text='Help for the same topic in another language must define exactly the same identifier.', verbose_name='Identifier')),
                ('lang', models.CharField(help_text='Lookup is done via istartswith.', max_length=5, verbose_name='Language')),
                ('width', models.PositiveIntegerField(default=500, help_text='Width of the help dialog.', verbose_name='Dialog width')),
                ('opener_class', models.CharField(default='.opener', help_text='CSS class of the element which gets the click event to open the help dialog (jQuery notation).', max_length=15, verbose_name='Opener class')),
                ('text', models.TextField(help_text='Main help text. You can use HTML here.', verbose_name='Text')),
            ],
            options={
                'ordering': [b'ident', b'lang'],
                'verbose_name': 'Internal Help',
                'verbose_name_plural': 'Internal Helps',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('event', models.CharField(max_length=50, verbose_name='Event', blank=True)),
                ('text', models.TextField(verbose_name='Text')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('last_edit', models.DateTimeField(auto_now=True, verbose_name='Last edit')),
                ('created_by', models.ForeignKey(blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='Created by')),
            ],
            options={
                'ordering': [b'journal__group__job', b'student__lastname', b'-created'],
                'verbose_name': 'Journal Entry',
                'verbose_name_plural': 'Journal Entries',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='JournalMedia',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('media_type', models.CharField(max_length=30, editable=False, blank=True)),
                ('media', models.FileField(upload_to=b'journals/%Y', verbose_name='Media')),
                ('entry', models.ForeignKey(verbose_name='Journal Entry', to='core.JournalEntry')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('text', models.TextField(verbose_name='Text')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('public', models.BooleanField(default=True, verbose_name='Public')),
                ('author', models.ForeignKey(verbose_name='Author', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': (b'-date', b'author'),
                'get_latest_by': b'date',
                'verbose_name': 'News',
                'verbose_name_plural': 'News',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('subject', models.CharField(max_length=50, verbose_name='Subject')),
                ('text', models.TextField(verbose_name='Text')),
                ('contact', models.ForeignKey(verbose_name='Contact', to='core.Contact')),
                ('user', models.ForeignKey(verbose_name='User', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description', blank=True)),
            ],
            options={
                'verbose_name': 'Part',
                'verbose_name_plural': 'Parts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PDFPrintout',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('category', models.CharField(max_length=20, verbose_name='Category')),
                ('pdf', models.FileField(upload_to=b'printouts/%Y/%m', verbose_name='PDF-File')),
                ('generated', models.DateTimeField(auto_now=True, verbose_name='Generated')),
            ],
            options={
                'ordering': [b'-generated'],
                'verbose_name': 'General Printout',
                'verbose_name_plural': 'General Printouts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PedagogicJournal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateField(auto_now_add=True, verbose_name='Created')),
                ('instructors', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Instructors')),
            ],
            options={
                'ordering': [b'group__job_short'],
                'verbose_name': 'Pedagogic Journal',
                'verbose_name_plural': 'Pedagogic Journals',
                'permissions': ((b'read', 'Read all journals'),),
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='journalentry',
            name='journal',
            field=models.ForeignKey(verbose_name='Journal', to='core.PedagogicJournal'),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=20, verbose_name='Name')),
                ('room', models.CharField(max_length=10, verbose_name='Roomnumber', blank=True)),
            ],
            options={
                'ordering': [b'name'],
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='accidententry',
            name='place',
            field=models.ForeignKey(verbose_name='Place', to='core.Place'),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='PresenceDay',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField(verbose_name='Date')),
                ('entry', models.CharField(default=b'', max_length=2, verbose_name='Entry', blank=True, choices=[('', 'leer'), ('A', 'anwesend'), ('T', 'nur telefonisch entschuldigt'), ('|', 'fehlt unentschuldigt'), ('K', 'krank (Nachweis vorhanden)'), ('FT', 'Feiertag'), ('B', 'Berufsschule anwesend'), ('BK', 'keine Berufsschulkarte vorgelegt'), ('BE', 'Berufsschule entschuldigt'), ('F', 'Freistellung'), ('Pr', 'Pr\xfcfung'), ('U', 'Urlaub'), ('O', 'OSZ (Kurs)'), ('/', 'nicht im bbz'), ('P', 'Praktikum'), ('BU', 'Bildungsurlaub'), ('*F', 'anwesend freigestellt')])),
                ('lateness', models.IntegerField(default=0, verbose_name='Lateness')),
                ('excused', models.NullBooleanField(verbose_name='Excused')),
                ('note', models.CharField(max_length=25, verbose_name='Note', blank=True)),
                ('instructor', models.ForeignKey(blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True, verbose_name='Instructor')),
            ],
            options={
                'ordering': [b'student__lastname', b'-date'],
                'verbose_name': 'Presence',
                'verbose_name_plural': 'Presences',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PresencePrintout',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('pdf', models.FileField(upload_to=b'presence/%Y/%m', verbose_name='PDF-File')),
                ('date', models.DateField(verbose_name='Date')),
                ('generated', models.DateTimeField(auto_now=True, verbose_name='Generated')),
                ('company', models.ForeignKey(verbose_name='Company', to='core.Company')),
            ],
            options={
                'ordering': [b'-date', b'company__name'],
                'verbose_name': 'Printout',
                'verbose_name_plural': 'Printouts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(max_length=100, verbose_name='Street', blank=True)),
                ('zip_code', models.CharField(max_length=15, verbose_name='Zip Code', blank=True)),
                ('city', models.CharField(max_length=100, verbose_name='City', blank=True)),
                ('country', models.CharField(max_length=50, verbose_name='Country', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('lastname', models.CharField(max_length=50, verbose_name='Lastname')),
                ('firstname', models.CharField(max_length=50, verbose_name='Firstname')),
                ('sex', models.CharField(max_length=1, verbose_name='Sex', choices=[(b'M', 'Male'), (b'F', 'Female')])),
                ('birthdate', models.DateField(verbose_name='Birthdate')),
                ('emergency', models.CharField(max_length=100, verbose_name='Notice in emergency', blank=True)),
                ('picture', models.ImageField(upload_to=b'pictures', verbose_name='Picture', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='Email', blank=True)),
                ('mobile', models.CharField(max_length=30, verbose_name='Mobile', blank=True)),
                ('cabinet', models.CharField(max_length=20, verbose_name='Cabinet', blank=True)),
                ('key', models.CharField(max_length=20, verbose_name='Key', blank=True)),
                ('school_education', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='School Education', choices=[(1, 'Kein Abschlu\xdf'), (2, 'Hauptschule'), (3, 'MSA'), (4, 'Abitur')])),
                ('applied_to', models.CharField(help_text='Separate two or more names with a comma.', max_length=150, verbose_name='Applied to', blank=True)),
                ('forwarded_to', models.CharField(help_text='Separate two or more names with a comma.', max_length=150, verbose_name='Forwarded to', blank=True)),
                ('jobs', models.CharField(help_text='Separate two or more jobs with a comma.', max_length=150, verbose_name='Jobs', blank=True)),
                ('test_result', models.PositiveSmallIntegerField(null=True, verbose_name='Test Result', blank=True)),
                ('test_date', models.DateField(null=True, verbose_name='Test Date', blank=True)),
                ('suit_phrase', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Suit phrase', choices=[(1, 'Die Berufseignung ist nicht gegeben.'), (2, 'Die Berufseignung ist bedingt gegeben.'), (3, 'Die Berufseignung ist gegeben.')])),
                ('exam_1', models.PositiveSmallIntegerField(null=True, verbose_name='Exam 1', blank=True)),
                ('exam_1_weight', models.PositiveSmallIntegerField(default=30, null=True, verbose_name='Exam 1 weight', blank=True)),
                ('exam_2', models.PositiveSmallIntegerField(null=True, verbose_name='Exam 2', blank=True)),
                ('barcode', models.CharField(max_length=100, editable=False, blank=True)),
                ('_barcode', models.ImageField(upload_to=b'barcodes', editable=False, blank=True)),
                ('finished', models.BooleanField(default=False, verbose_name='Finished')),
                ('company', models.ForeignKey(verbose_name='Company', blank=True, to='core.Company', null=True)),
                ('contract', models.ForeignKey(verbose_name='Cooperation Contract', blank=True, to='core.CooperationContract', null=True)),
            ],
            options={
                'ordering': [b'company__name', b'lastname'],
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='presenceday',
            name='student',
            field=models.ForeignKey(verbose_name='Student', to='core.Student'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='journalentry',
            name='student',
            field=models.ForeignKey(verbose_name='Student', to='core.Student'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='accidententry',
            name='student',
            field=models.ForeignKey(verbose_name='Verletzter Azubi', blank=True, to='core.Student', null=True),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='StudentAuditLogEntry',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('street', models.CharField(max_length=100, verbose_name='Street', blank=True)),
                ('zip_code', models.CharField(max_length=15, verbose_name='Zip Code', blank=True)),
                ('city', models.CharField(max_length=100, verbose_name='City', blank=True)),
                ('country', models.CharField(max_length=50, verbose_name='Country', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('lastname', models.CharField(max_length=50, verbose_name='Lastname')),
                ('firstname', models.CharField(max_length=50, verbose_name='Firstname')),
                ('sex', models.CharField(max_length=1, verbose_name='Sex', choices=[(b'M', 'Male'), (b'F', 'Female')])),
                ('birthdate', models.DateField(verbose_name='Birthdate')),
                ('emergency', models.CharField(max_length=100, verbose_name='Notice in emergency', blank=True)),
                ('picture', models.ImageField(upload_to=b'pictures', verbose_name='Picture', blank=True)),
                ('email', models.EmailField(max_length=75, verbose_name='Email', blank=True)),
                ('mobile', models.CharField(max_length=30, verbose_name='Mobile', blank=True)),
                ('cabinet', models.CharField(max_length=20, verbose_name='Cabinet', blank=True)),
                ('key', models.CharField(max_length=20, verbose_name='Key', blank=True)),
                ('school_education', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='School Education', choices=[(1, 'Kein Abschlu\xdf'), (2, 'Hauptschule'), (3, 'MSA'), (4, 'Abitur')])),
                ('applied_to', models.CharField(help_text='Separate two or more names with a comma.', max_length=150, verbose_name='Applied to', blank=True)),
                ('forwarded_to', models.CharField(help_text='Separate two or more names with a comma.', max_length=150, verbose_name='Forwarded to', blank=True)),
                ('jobs', models.CharField(help_text='Separate two or more jobs with a comma.', max_length=150, verbose_name='Jobs', blank=True)),
                ('test_result', models.PositiveSmallIntegerField(null=True, verbose_name='Test Result', blank=True)),
                ('test_date', models.DateField(null=True, verbose_name='Test Date', blank=True)),
                ('suit_phrase', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Suit phrase', choices=[(1, 'Die Berufseignung ist nicht gegeben.'), (2, 'Die Berufseignung ist bedingt gegeben.'), (3, 'Die Berufseignung ist gegeben.')])),
                ('exam_1', models.PositiveSmallIntegerField(null=True, verbose_name='Exam 1', blank=True)),
                ('exam_1_weight', models.PositiveSmallIntegerField(default=30, null=True, verbose_name='Exam 1 weight', blank=True)),
                ('exam_2', models.PositiveSmallIntegerField(null=True, verbose_name='Exam 2', blank=True)),
                ('barcode', models.CharField(max_length=100, editable=False, blank=True)),
                ('_barcode', models.ImageField(upload_to=b'barcodes', editable=False, blank=True)),
                ('finished', models.BooleanField(default=False, verbose_name='Finished')),
                ('action_id', models.AutoField(serialize=False, primary_key=True)),
                ('action_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('action_type', models.CharField(max_length=1, editable=False, choices=[(b'I', 'Created'), (b'U', 'Changed'), (b'D', 'Deleted')])),
                ('action_user', audit_log.models.fields.LastUserField(editable=False, to=settings.AUTH_USER_MODEL, null=True)),
                ('company', models.ForeignKey(verbose_name='Company', blank=True, to='core.Company', null=True)),
                ('contract', models.ForeignKey(verbose_name='Cooperation Contract', blank=True, to='core.CooperationContract', null=True)),
            ],
            options={
                'ordering': (b'-action_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('school_nr', models.CharField(max_length=10, verbose_name='School Number', blank=True)),
                ('job', models.CharField(max_length=50, verbose_name='Job')),
                ('job_short', models.CharField(help_text='This field will be converted to uppercase.', max_length=10, verbose_name='Job Short')),
                ('suffix', models.CharField(blank=True, max_length=1, verbose_name='Suffix', choices=[('a', 'a'), ('b', 'b'), ('c', 'c'), ('d', 'd')])),
            ],
            options={
                'ordering': [b'-start_date', b'job'],
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='studentauditlogentry',
            name='group',
            field=models.ForeignKey(verbose_name='Group', blank=True, to='core.StudentGroup', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='student',
            name='group',
            field=models.ForeignKey(verbose_name='Group', blank=True, to='core.StudentGroup', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='presenceprintout',
            name='group',
            field=models.ForeignKey(verbose_name='Group', to='core.StudentGroup'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pedagogicjournal',
            name='group',
            field=models.OneToOneField(verbose_name='Group', to='core.StudentGroup'),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(max_length=100, verbose_name='Street', blank=True)),
                ('zip_code', models.CharField(max_length=15, verbose_name='Zip Code', blank=True)),
                ('city', models.CharField(max_length=100, verbose_name='City', blank=True)),
                ('country', models.CharField(max_length=50, verbose_name='Country', blank=True)),
                ('phone', models.CharField(max_length=30, verbose_name='Phone', blank=True)),
                ('name_prefix', models.CharField(max_length=12, verbose_name='Name Prefix', blank=True)),
                ('birthdate', models.DateField(null=True, verbose_name='Birthdate', blank=True)),
                ('mobile', models.CharField(max_length=30, verbose_name='Mobile', blank=True)),
                ('subjects', models.CharField(help_text='Separate two or more subjects with a comma.', max_length=150, verbose_name='Subjects', blank=True)),
                ('can_login', models.BooleanField(default=True, verbose_name='Can Login')),
                ('external', models.BooleanField(default=False, verbose_name='External')),
                ('barcode', models.CharField(max_length=100, editable=False, blank=True)),
                ('_barcode', models.ImageField(upload_to=b'barcodes', editable=False, blank=True)),
                ('_config', models.TextField(default=b'', editable=False, blank=True)),
                ('part', models.ForeignKey(verbose_name='Part', blank=True, to='core.Part', null=True)),
                ('user', models.OneToOneField(editable=False, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
            bases=(models.Model,),
        ),
    ]
